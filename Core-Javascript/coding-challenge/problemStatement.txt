Coding challenge #1: Print numbers from 1 to 10
Coding challenge #2: Print the odd numbers less than 100
Coding challenge #3: Calculate the sum of numbers from 1 to 10
Coding challenge #4: Calculate the sum of odd numbers greater than 10 and less than 30
Coding challenge #5: Calculate the average of the numbers in an array of numbers
Coding challenge #6: Find the maximum number in an array of numbers
Coding challenge #7: Reverse a string
Coding challenge #8: Create a function that will merge two arrays and return the result as a new array
Coding challenge #9: Find the length of the longest substring without repeating characters
Coding challenge #10: 
    Given a sorted array arr[] with possibly duplicate elements, 
    the task is to find indexes of the first and last occurrences of an element x in the given array. 

**********************************example****************************
Input : arr[] = {1, 3, 5, 5, 5, 5, 67, 123, 125}, x = 5
Output : First Occurrence = 2
              Last Occurrence = 5

Input : arr[] = {1, 3, 5, 5, 5, 5, 7, 123, 125 }, x = 7

Output : First Occurrence = 6
              Last Occurrence = 6

_______________________________________________________________________________
Hint ::
For the first occurrence of a number 

a) If (high >= low)
b) Calculate  mid = low + (high – low)/2;
c) If ((mid == 0 || x > arr[mid-1]) && arr[mid] == x)
        return mid;
d) Else if (x > arr[mid])
       return first(arr, (mid + 1), high, x, n);
e) Else
       return first(arr, low, (mid -1), x, n);
f) Otherwise return -1;

For the last occurrence of a number 

a) if (high >= low)
b) calculate mid = low + (high – low)/2;
c)if( ( mid == n-1 || x < arr[mid+1]) && arr[mid] == x )
        return mid;
d) else if(x < arr[mid])
       return last(arr, low, (mid -1), x, n);
e) else
      return last(arr, (mid + 1), high, x, n);      
f) otherwise return -1;